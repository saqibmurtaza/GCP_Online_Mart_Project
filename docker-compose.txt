# services:
#   fastapi_01:
#     build:
#       context: ./fastapi_1
#       dockerfile: Dockerfile.prod
#     volumes:
#       - ./fastapi_1:/app
#     ports:
#       - "8000:8000"
#     env_file:
#       - ${PWD}/.env
#     depends_on:
#       - broker
#     labels:
#       - "dapr.io/enabled=true"
#       - "dapr.io/app-id=fastapi-01"
#       - "dapr.io/app-port=8000"
#       - "dapr.io/app-protocol=http"
  
#   fastapi_02:
#     build:
#       context: ./fastapi_2
#       dockerfile: Dockerfile.cons
#     volumes:
#       - ./fastapi_2:/app
#     ports:
#       - "8001:8001"
#     env_file:
#       - .env
#     depends_on:
#       - postgres_db
#       - broker
#     labels:
#       - "dapr.io/enabled=true"
#       - "dapr.io/app-id=fastapi-02"
#       - "dapr.io/app-port=8001"
#       - "dapr.io/app-protocol=http"
      
#   notification_service:
#     build:
#       context: ./notification_service
#       dockerfile: Dockerfile.not
#     volumes:
#       - ./notification_service:/app
#     ports:
#       - "8002:8002"
#     depends_on:
#       - broker
#     env_file:
#       - ./notification_service/notification_service/.env
#     labels:
#       - "dapr.io/enabled=true"
#       - "dapr.io/app-id=notification-service"
#       - "dapr.io/app-port=8002"
#       - "dapr.io/app-protocol=http"
  
#   users_service:
#     build:
#       context: ./users_service
#       dockerfile: Dockerfile.use
#     volumes:
#       - ./users_service:/app
#     ports:
#       - "8005:8005"
#     depends_on:
#       - broker
#     env_file:
#       - ./users_service/users_service/.env
#     labels:
#       - "dapr.io/enabled=true"
#       - "dapr.io/app-id=users-service"
#       - "dapr.io/app-port=8005"
#       - "dapr.io/app-protocol=http"
  
#   order_service:
#     build:
#       context: ./order_service
#       dockerfile: Dockerfile.ord
#     volumes:
#       - ./order_service:/app
#     ports:
#       - "8003:8003"
#     depends_on:
#       - broker
#     env_file:
#       - ./order_service/order_service/.env
#     labels:
#       - "dapr.io/enabled=true"
#       - "dapr.io/app-id=order-service"
#       - "dapr.io/app-port=8003"
#       - "dapr.io/app-protocol=http"

#   postgres_db:
#     image: postgres:latest
#     restart: always
#     container_name: neon_postgresql
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"

#   broker:
#     image: apache/kafka:3.7.0
#     hostname: broker
#     container_name: broker
#     ports:
#       - "9092:9092"
#     environment:
#       KAFKA_NODE_ID: 1
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#       KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
#       KAFKA_PROCESS_ROLES: 'broker,controller'
#       KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
#       KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
#       KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
#       KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
#       CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

#   kafka_ui:
#     image: provectuslabs/kafka-ui:latest
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
#       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
#       DYNAMIC_CONFIG_ENABLED: "true"
#     depends_on:
#       - broker

# volumes:
#   postgres_data:
#     driver: local

# networks:
#   default:
#     driver: bridge

services:
  fastapi_01:
    build:
      context: ./fastapi_1
      dockerfile: Dockerfile.prod
    volumes:
      - ./fastapi_1/fastapi_1:/app
    ports:
      - "8000:8000"
    env_file:
      # - ${PWD}/.env
      - ./fastapi_1/fastapi_1
    depends_on:
      - broker
    labels:
      - "dapr.io/enabled=true"
      - "dapr.io/app-id=fastapi-01"
      - "dapr.io/app-port=8000"
      - "dapr.io/app-protocol=http"
    networks:
      - my_network
  
  fastapi_02:
    build:
      context: ./fastapi_2
      dockerfile: Dockerfile.cons
    volumes:
      - ./fastapi_2/fastapi_2:/app
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      - postgres_db
      - broker
    labels:
      - "dapr.io/enabled=true"
      - "dapr.io/app-id=fastapi-02"
      - "dapr.io/app-port=8001"
      - "dapr.io/app-protocol=http"
    networks:
      - my_network
      
  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile.not
    volumes:
      - ./notification_service/notification_service:/app
    ports:
      - "8002:8002"
    depends_on:
      - broker
    env_file:
      - ./notification_service/notification_service/.env
    labels:
      - "dapr.io/enabled=true"
      - "dapr.io/app-id=notification-service"
      - "dapr.io/app-port=8002"
      - "dapr.io/app-protocol=http"
    networks:
      - my_network
  
  users_service:
    build:
      context: ./users_service
      dockerfile: Dockerfile.use
    volumes:
      - ./users_service/users_service:/app
    ports:
      - "8005:8005"
    depends_on:
      - broker
    env_file:
      - ./users_service/users_service/.env
    labels:
      - "dapr.io/enabled=true"
      - "dapr.io/app-id=users-service"
      - "dapr.io/app-port=8005"
      - "dapr.io/app-protocol=http"
    networks:
      - my_network
  
  order_service:
    build:
      context: ./order_service
      dockerfile: Dockerfile.ord
    volumes:
      - ./order_service/order_service:/app
    ports:
      - "8003:8003"
    depends_on:
      - broker
    env_file:
      - ./order_service/order_service/.env
    labels:
      - "dapr.io/enabled=true"
      - "dapr.io/app-id=order-service"
      - "dapr.io/app-port=8003"
      - "dapr.io/app-protocol=http"
    networks:
      - my_network

  inventory_service:
    build:
      context: ./inventory_service
      dockerfile: Dockerfile.inv
    volumes:
      - ./inventory_service/inventory_service:/app
    ports:
      - "8008:8008"
    depends_on:
      - broker
    labels:
      - "dapr.io/enabled=true"
      - "dapr.io/app-id=inventory-service"
      - "dapr.io/app-port=8008"
      - "dapr.io/app-protocol=http"
    networks:
      - my_network
  
  postgres_db:
    image: postgres:latest
    restart: always
    container_name: neon_postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - my_network

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - my_network

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
    networks:
      - my_network

volumes:
  postgres_data:
    driver: local

networks:
  my_network:
    driver: bridge
